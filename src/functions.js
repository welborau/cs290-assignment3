// Author:   Austin Welborn
// Class:    CS290
// Date:     1/26/2015
/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
	return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function(doubleArray) {
	for (var i = 0; i < doubleArray.length; i++) 	// loop through all elements of the array
	{
		if (isNaN(doubleArray[i]))					// if element is NaN (undefined) return false
		{
			return false;
		}
		doubleArray[i] *= 2;						// else multiply that element by 2
	}
	return true;
}
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray) {
	var hash, message;
	var array = [];
	var data = [];
	for (var i = 0; i < logArray.length; i++)			// loop through all elements of logArray
	{
		data = logArray[i].split(" ");					// break up the strings to elements between spaces
		hash = data[0];									// hash is first portion of the data
		data.splice(0,1);								// remove the hash portion 
		var data2 = data.join(" ");						// create a new string separated by spaces
		data2 = data2.split("\"");						// find the " " that spans the message
		data2.pop();									// removes the last "" in the array
		var date = new Date(data2[0]);					// create an new Date object and assign it first element
		message = data2[1];								// assign 2nd element for message

		var myLog = new GitLog(hash, date, message);	// create instances of GitLog with hash, date, message
		array.push(myLog);								// push the instances into the array
	}
	return array;
}//end your code
